/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        cursorWordPartRight: cursorWordPartRight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_ALT &kp Q>;
            label = "CURSORWORDPARTRIGHT";
        };

        cursorWordPartLeft: cursorWordPartLeft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "CURSORWORDPARTLEFT";
        };
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold/Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <31 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&none          &kp N1           &kp N2          &kp N3              &kp N4            &kp N5                                 &kp N6           &kp N7             &kp N8               &kp N9           &kp N0                   &none
&kp DELETE     &kp Q            &kp W           &kp E               &kp R             &kp T                                  &kp Y            &kp U              &kp I                &kp O            &kp P                    &kp MINUS
&kp BACKSPACE  &ht RIGHT_GUI A  &ht LEFT_ALT S  &ht LEFT_CONTROL D  &ht LEFT_SHIFT F  &kp G                                  &kp H            &ht RIGHT_SHIFT J  &ht RIGHT_CONTROL K  &ht RIGHT_ALT L  &ht RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp MINUS      &kp Z            &kp X           &kp C               &kp V             &kp B      &none          &tog 7       &kp N            &kp M              &kp COMMA            &kp DOT          &ht RIGHT_CONTROL SLASH  &kp UNDERSCORE
                                                &kp LEFT_SHIFT      &lt 1 ESCAPE      &lt 2 TAB  &lt 6 SPACE    &lt 3 ENTER  &lt 5 BACKSPACE  &lt 4 DELETE       &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        media_layer {
            bindings = <
&none   &trans  &trans            &trans             &trans      &trans                            &trans  &trans      &trans             &trans      &trans  &trans
&trans  &trans  &kp C_MUTE        &kp C_VOLUME_UP    &kp C_NEXT  &trans                            &trans  &kp C_NEXT  &kp C_VOLUME_UP    &kp C_MUTE  &trans  &trans
&trans  &trans  &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_PREV  &trans                            &trans  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_PP    &trans  &trans
&trans  &trans  &trans            &trans             &trans      &trans  &bt BT_CLR_ALL    &trans  &trans  &trans      &trans             &trans      &trans  &trans
                                  &trans             &trans      &trans  &trans            &trans  &trans  &trans      &trans
            >;

            label = "Media";
        };

        nav_layer {
            bindings = <
&trans     &trans          &trans          &trans        &trans           &trans                        &trans         &trans      &trans     &trans     &trans     &trans
&trans     &kp LC(Z)       &kp LC(X)       &kp LC(C)     &kp LC(V)        &kp LC(Y)                     &kp LC(Y)      &kp LC(V)   &kp LC(C)  &kp LC(X)  &kp LC(Z)  &trans
&kp LC(A)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp CAPS                      &kp CAPS       &kp LEFT    &kp UP     &kp DOWN   &kp RIGHT  &kp LC(A)
&trans     &kp END         &kp PG_DN       &kp PG_UP     &kp HOME         &kp INSERT  &trans    &trans  &kp INSERT     &kp HOME    &kp PG_DN  &kp PG_UP  &kp END    &trans
                                           &trans        &trans           &trans      &trans    &trans  &kp BACKSPACE  &kp DELETE  &trans
            >;
        };

        symbols_layer {
            bindings = <
&trans  &trans           &trans          &trans            &trans      &trans                         &trans                &trans                 &trans            &trans             &trans     &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN     &kp HASH          &kp DOLLAR  &kp PERCENT                    &kp CARET             &kp AMPERSAND          &kp ASTERISK      &kp BACKSLASH      &kp GRAVE  &trans
&trans  &kp MINUS        &kp UNDERSCORE  &trans            &trans      &trans                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL  &trans
&trans  &trans           &kp LESS_THAN   &kp GREATER_THAN  &trans      &trans       &trans    &trans  &trans                &trans                 &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans     &trans
                                         &trans            &trans      &trans       &trans    &trans  &trans                &trans                 &trans
            >;
        };

        function_layers {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                   &trans           &trans  &trans  &trans  &trans   &trans
&none   &kp F12       &kp F7        &kp F8        &kp F9        &kp PRINTSCREEN                                &kp PRINTSCREEN  &kp F9  &kp F8  &kp F7  &kp F12  &none
&none   &kp F11       &kp F4        &kp F5        &kp F6        &kp SCROLLLOCK                                 &kp SCROLLLOCK   &kp F6  &kp F5  &kp F4  &kp F11  &none
&none   &kp F10       &kp F1        &kp F2        &kp F3        &kp PAUSE_BREAK  &bt BT_CLR    &bt BT_CLR_ALL  &kp PAUSE_BREAK  &kp F3  &kp F2  &kp F1  &kp F10  &none
                                    &trans        &trans        &trans           &trans        &trans          &trans           &trans  &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans     &trans  &trans  &trans      &trans                             &trans     &trans  &trans  &trans  &trans     &trans
&trans  &kp LBKT   &kp N7  &kp N8  &kp N9      &kp RBKT                           &kp LBKT   &kp N9  &kp N8  &kp N7  &kp RBKT   &trans
&trans  &kp SEMI   &kp N4  &kp N5  &kp N6      &kp EQUAL                          &kp EQUAL  &kp N6  &kp N5  &kp N4  &kp SEMI   &trans
&trans  &kp GRAVE  &kp N1  &kp N2  &kp N3      &kp BSLH      &trans       &trans  &kp BSLH   &kp N3  &kp N2  &kp N1  &kp GRAVE  &trans
                           &trans  &kp PERIOD  &kp NUMBER_0  &kp MINUS    &trans  &trans     &trans  &trans
            >;
        };

        mouse_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                               &trans     &trans     &trans     &trans     &trans     &trans
&trans      &trans          &trans          &trans        &trans           &trans                                     &kp LC(Y)  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &trans
&trans      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans                                     &trans     &kp LEFT   &kp UP     &kp DOWN   &kp RIGHT  &trans
&trans      &trans          &trans          &trans        &trans           &trans        &bt BT_CLR_ALL    &trans     &trans     &trans     &trans     &trans     &trans     &trans
                                            &trans        &trans           &trans        &trans            &mkp RCLK  &mkp LCLK  &mkp MCLK  &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3        &kp N4  &kp N5                          &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E         &kp R   &kp T                           &kp Y   &kp U   &kp I      &kp O    &kp P     &kp LBKT
&kp LSHFT  &kp A   &kp S   &kp D         &kp F   &kp G                           &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp APOS
&kp CAPS   &kp Z   &kp X   &kp C         &kp V   &kp B   &kp M        &trans     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &none
                           &kp NUMBER_6  &kp N7  &kp N8  &kp SPACE    &kp ENTER  &trans  &trans  &trans
            >;

            label = "Gaming";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
